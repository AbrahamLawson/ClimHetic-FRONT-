# ==========================================
# GITHUB ACTIONS - DÉPLOIEMENT AUTOMATIQUE
# ==========================================
# Ce fichier déploie automatiquement ton app quand tu push sur GitHub

name: 🚀 Déploiement ClimHetic

# Quand déclencher le déploiement
on:
  push:
    branches: [ main ]  # À chaque push sur la branche main
  workflow_dispatch:    # Ou manuellement depuis GitHub

jobs:
  deploy:
    name: 📦 Déployer sur le serveur
    runs-on: ubuntu-latest
    
    steps:
    # 1. Récupérer le code depuis GitHub
    - name: 📥 Récupérer le code
      uses: actions/checkout@v4
    
    # 2. Se connecter au serveur et déployer
    - name: 🚀 Déployer sur le serveur
      uses: appleboy/ssh-action@v1.0.3
      with:
        # Informations de connexion (à configurer dans les secrets GitHub)
        host: admin-hetic.arcplex.tech
        username: abraham
        password: ${{ secrets.SERVER_PASSWORD }}
        port: 2326
        
        # Commandes à exécuter sur le serveur
        script: |
          echo "🚀 Début du déploiement automatique..."
          
          # Définir les répertoires de travail
          BASE_DIR="/home/abraham"
          OLD_PROJECT_DIR="/home/abraham/climhetic-front"
          NEW_PROJECT_DIR="/home/abraham/climhetic-front-new"
          
          # Arrêter les conteneurs Docker en cours si ils existent
          echo "🛑 Arrêt des conteneurs existants..."
          cd "$OLD_PROJECT_DIR" 2>/dev/null && docker-compose -f deployment/docker-compose.yml down 2>/dev/null || true
          
          # Supprimer l'ancien répertoire temporaire s'il existe
          sudo rm -rf "$NEW_PROJECT_DIR" 2>/dev/null || true
          
          # Cloner dans un nouveau répertoire propre
          echo "📥 Clonage du code dans un répertoire propre..."
          cd "$BASE_DIR"
          git clone https://github.com/${{ github.repository }}.git climhetic-front-new
          
          # Vérifier que le clonage a réussi
          if [ ! -d "$NEW_PROJECT_DIR" ]; then
            echo "❌ Erreur: le clonage a échoué"
            exit 1
          fi
          
          # Remplacer l'ancien répertoire par le nouveau
          echo "🔄 Remplacement de l'ancien code..."
          sudo rm -rf "$OLD_PROJECT_DIR" 2>/dev/null || true
          
          # Déplacer le nouveau répertoire
          if ! mv "$NEW_PROJECT_DIR" "$OLD_PROJECT_DIR"; then
            echo "❌ Erreur lors du déplacement du répertoire"
            echo "📋 État des répertoires:"
            ls -la "$BASE_DIR"
            exit 1
          fi
          
          # Aller dans le répertoire final
          cd "$OLD_PROJECT_DIR"
          
          # Vérifier qu'on est dans le bon répertoire
          echo "📍 Répertoire actuel: $(pwd)"
          echo "📋 Contenu:"
          ls -la
          
          # Vérifier que le code est présent
          if [ ! -f "deployment/docker-compose.yml" ]; then
            echo "❌ Erreur: fichier docker-compose.yml non trouvé"
            echo "📋 Contenu du répertoire:"
            ls -la
            exit 1
          fi
          
          # Vérifier que Docker est installé
          if ! command -v docker &> /dev/null; then
            echo "🐳 Installation de Docker..."
            sudo apt update
            sudo apt install -y docker.io docker-compose
            sudo usermod -aG docker abraham
            sudo systemctl start docker
            sudo systemctl enable docker
          fi
          
          # Vérifier que les fichiers sont présents
          echo "🔍 Vérification des fichiers..."
          ls -la deployment/
          
          # Nettoyer les images Docker anciennes
          echo "🧹 Nettoyage des images Docker..."
          docker system prune -f || true
          
          # S'assurer que l'utilisateur peut utiliser Docker
          echo "🔧 Configuration des permissions Docker..."
          sudo usermod -aG docker abraham || true
          
          # Construire et lancer la nouvelle version
          echo "🔨 Construction et lancement..."
          if ! docker-compose -f deployment/docker-compose.yml up --build -d; then
            echo "❌ Erreur lors du lancement des conteneurs"
            echo "📋 Logs d'erreur:"
            docker-compose -f deployment/docker-compose.yml logs
            exit 1
          fi
          
          # Attendre un peu que les conteneurs démarrent
          echo "⏳ Attente du démarrage des conteneurs..."
          sleep 10
          
          # Vérifier que ça marche
          echo "📊 Vérification des conteneurs..."
          docker-compose -f deployment/docker-compose.yml ps
          
          # Vérifier les logs en cas de problème
          echo "📋 Logs des conteneurs:"
          docker-compose -f deployment/docker-compose.yml logs --tail=20
          
          echo "✅ Déploiement automatique terminé !"
          echo "🌐 Application accessible sur : http://09.hetic.arcplex.dev"
